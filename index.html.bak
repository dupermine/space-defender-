<!DOCTYPE html><html><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Космический защитник</title>    <style>        body {            margin: 0;            padding: 0;            overflow: hidden;            background-color: #000;            display: flex;            justify-content: center;            align-items: center;            height: 100vh;            font-family: Arial, sans-serif;        }        canvas {            display: block;            background-color: #111;        }        #gameUI {            position: absolute;            color: white;            font-size: 20px;            text-align: center;        }        #startScreen {            position: absolute;            color: white;            text-align: center;        }        button {            background-color: #4CAF50;            border: none;            color: white;            padding: 15px 32px;            text-align: center;            text-decoration: none;            display: inline-block;            font-size: 16px;            margin: 10px 2px;            cursor: pointer;            border-radius: 5px;        }    </style></head><body>    <canvas id="gameCanvas"></canvas>        <div id="startScreen">        <h1>Космический защитник</h1>        <p>Защищайте планету от астероидов!</p>        <p>Управление: мышка или касание экрана</p>        <button id="startButton">Начать игру</button>    </div>        <div id="gameUI" style="display: none;">        <p>Очки: <span id="score">0</span></p>        <p>Жизни: <span id="lives">3</span></p>    </div>    <script>        // Инициализация игры        const canvas = document.getElementById('gameCanvas');        const ctx = canvas.getContext('2d');        const startScreen = document.getElementById('startScreen');        const gameUI = document.getElementById('gameUI');        const scoreElement = document.getElementById('score');        const livesElement = document.getElementById('lives');        const startButton = document.getElementById('startButton');                // Размеры canvas        canvas.width = 800;        canvas.height = 600;                // Игровые переменные        let score = 0;        let lives = 3;        let gameRunning = false;        let animationId;                // Игровые объекты        const player = {            x: canvas.width / 2,            y: canvas.height - 50,            width: 50,            height: 30,            speed: 8,            color: '#3498db'        };                const bullets = [];        const asteroids = [];                // Настройки игры        const gameSettings = {            bulletSpeed: 10,            asteroidSpeed: 3,            asteroidSpawnRate: 60, // кадры между появлением астероидов            asteroidSpawnCounter: 0        };                // Обработчики событий        canvas.addEventListener('mousemove', movePlayer);        canvas.addEventListener('touchmove', function(e) {            e.preventDefault();            const touch = e.touches[0];            const rect = canvas.getBoundingClientRect();            player.x = touch.clientX - rect.left;        });                canvas.addEventListener('click', shoot);        canvas.addEventListener('touchstart', shoot);                startButton.addEventListener('click', startGame);                // Функции игры        function startGame() {            startScreen.style.display = 'none';            gameUI.style.display = 'block';            gameRunning = true;            score = 0;            lives = 3;            bullets.length = 0;            asteroids.length = 0;            updateUI();            gameLoop();        }                function gameLoop() {            if (!gameRunning) return;                        clearCanvas();            updateGame();            drawGame();                        animationId = requestAnimationFrame(gameLoop);        }                function clearCanvas() {            ctx.fillStyle = '#111';            ctx.fillRect(0, 0, canvas.width, canvas.height);        }                function updateGame() {            // Обновление пуль            for (let i = bullets.length - 1; i >= 0; i--) {                bullets[i].y -= gameSettings.bulletSpeed;                                // Удаление пуль за пределами экрана                if (bullets[i].y < 0) {                    bullets.splice(i, 1);                }            }                        // Обновление астероидов            gameSettings.asteroidSpawnCounter++;            if (gameSettings.asteroidSpawnCounter >= gameSettings.asteroidSpawnRate) {                spawnAsteroid();                gameSettings.asteroidSpawnCounter = 0;                                // Увеличиваем сложность                if (score > 0 && score % 10 === 0) {                    gameSettings.asteroidSpeed += 0.2;                    if (gameSettings.asteroidSpawnRate > 20) {                        gameSettings.asteroidSpawnRate -= 2;                    }                }            }                        for (let i = asteroids.length - 1; i >= 0; i--) {                asteroids[i].y += asteroids[i].speed;                                // Проверка столкновения с игроком                if (checkCollision(player, asteroids[i])) {                    asteroids.splice(i, 1);                    lives--;                    updateUI();                    if (lives <= 0) {                        gameOver();                    }                    continue;                }                                // Удаление астероидов за пределами экрана                if (asteroids[i].y > canvas.height) {                    asteroids.splice(i, 1);                }                                // Проверка столкновения пуль с астероидами                for (let j = bullets.length - 1; j >= 0; j--) {                    if (checkCollision(bullets[j], asteroids[i])) {                        asteroids.splice(i, 1);                        bullets.splice(j, 1);                        score++;                        updateUI();                        break;                    }                }            }        }                function drawGame() {            // Рисуем игрока            ctx.fillStyle = player.color;            ctx.fillRect(player.x - player.width/2, player.y - player.height/2, player.width, player.height);                        // Рисуем пушки            ctx.fillStyle = '#2980b9';            ctx.fillRect(player.x - player.width/2 - 5, player.y - player.height/2 - 10, 10, 10);            ctx.fillRect(player.x + player.width/2 - 5, player.y - player.height/2 - 10, 10, 10);                        // Рисуем пули            ctx.fillStyle = '#f1c40f';            bullets.forEach(bullet => {                ctx.beginPath();                ctx.arc(bullet.x, bullet.y, bullet.radius, 0, Math.PI * 2);                ctx.fill();            });                        // Рисуем астероиды            ctx.fillStyle = '#95a5a6';            asteroids.forEach(asteroid => {                ctx.beginPath();                ctx.arc(asteroid.x, asteroid.y, asteroid.radius, 0, Math.PI * 2);                ctx.fill();            });        }                function movePlayer(e) {            const rect = canvas.getBoundingClientRect();            player.x = e.clientX - rect.left;                        // Ограничение движения игрока в пределах canvas            if (player.x < player.width/2) player.x = player.width/2;            if (player.x > canvas.width - player.width/2) player.x = canvas.width - player.width/2;        }                function shoot() {            if (!gameRunning) return;                        // Создаем две пули (из двух пушек)            bullets.push({                x: player.x - player.width/2,                y: player.y - player.height/2 - 10,                radius: 5            });                        bullets.push({                x: player.x + player.width/2,                y: player.y - player.height/2 - 10,                radius: 5            });        }                function spawnAsteroid() {            const radius = Math.random() * 20 + 10;            asteroids.push({                x: Math.random() * (canvas.width - radius * 2) + radius,                y: -radius,                radius: radius,                speed: Math.random() * gameSettings.asteroidSpeed + 1            });        }                function checkCollision(obj1, obj2) {            // Проверка столкновения двух круглых объектов            const dx = obj1.x - obj2.x;            const dy = obj1.y - obj2.y;            const distance = Math.sqrt(dx * dx + dy * dy);                        if (obj1.radius && obj2.radius) {                return distance < obj1.radius + obj2.radius;            }                        // Для прямоугольного игрока и круглого астероида            if (!obj1.radius && obj2.radius) {                const rect = {                    x: obj1.x - obj1.width/2,                    y: obj1.y - obj1.height/2,                    width: obj1.width,                    height: obj1.height                };                                const circle = {                    x: obj2.x,                    y: obj2.y,                    radius: obj2.radius                };                                const distX = Math.abs(circle.x - rect.x - rect.width/2);                const distY = Math.abs(circle.y - rect.y - rect.height/2);                if (distX > (rect.width/2 + circle.radius)) return false;                if (distY > (rect.height/2 + circle.radius)) return false;                if (distX <= (rect.width/2)) return true;                if (distY <= (rect.height/2)) return true;                const dx = distX - rect.width/2;                const dy = distY - rect.height/2;                return (dx*dx + dy*dy <= (circle.radius * circle.radius));            }                        return false;        }                function updateUI() {            scoreElement.textContent = score;            livesElement.textContent = lives;        }                function gameOver() {            gameRunning = false;            cancelAnimationFrame(animationId);                        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';            ctx.fillRect(0, 0, canvas.width, canvas.height);                        ctx.fillStyle = 'white';            ctx.font = '36px Arial';            ctx.textAlign = 'center';            ctx.fillText('Игра окончена!', canvas.width/2, canvas.height/2 - 50);            ctx.font = '24px Arial';            ctx.fillText(`Ваш счет: ${score}`, canvas.width/2, canvas.height/2);                        ctx.font = '20px Arial';            ctx.fillText('Кликните чтобы играть снова', canvas.width/2, canvas.height/2 + 50);                        canvas.addEventListener('click', restartGame);            canvas.addEventListener('touchstart', restartGame);        }                function restartGame() {            canvas.removeEventListener('click', restartGame);            canvas.removeEventListener('touchstart', restartGame);            startGame();        }    </script></body></html>